#create a google cloud free trail account
#create an Kubernete Cluster with th Google Kubernete Engine 
cloud.google.com>console>choose project> type kubernetes engine> on cluster> create cluster (default) rename it> 

#deploy a docker image
docker run -p 8080:8080 in28min/hello-world-rest-api:0.0.1.RELEASE

click in your cluster> Active cloud shell> on your cluster click on connect> copy and paste on cloud shell the command-line access
--example
gcloud container clusters get-credentials {cluster-name} --zone {geographical-zone} --project {project-id}

#create your deployment on cloud shell
kubectl create deployment {deployment-name} --image={image-name}
--example
kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE

#deploy your container image on cloud shell
kubectl expose deployment {deployment-name} --type={type} --port={port-name}
--example
kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080

kubectl scale deployment hello-world-rest-api --replicas=3
kubectl delete pod hello-world-rest-api-58ff5dd898-62l9d
kubectl autoscale deployment hello-world-rest-api --max=10 --cpu-percent=70
kubectl edit deployment hello-world-rest-api #minReadySeconds: 15
kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE
 
gcloud container clusters get-credentials in28minutes-cluster --zone us-central1-a --project solid-course-258105
kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE
kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080
kubectl set image deployment hello-world-rest-api hello-world-rest-api=DUMMY_IMAGE:TEST
kubectl get events --sort-by=.metadata.creationTimestamp
kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE
kubectl get events --sort-by=.metadata.creationTimestamp
kubectl get componentstatuses
kubectl get pods --all-namespaces

#to know what happens on the background type on cloud shell 
kubectl get events

#get and see the details of all the created pods
kubectl get pods

#get all the components status
kubectl get componentstatuses

#get and see the details of all the created replicaset
kubectl get replicaset

#get and see the details of all the created deployment
kubectl get deployment

#get an see the details of all the created service
kubectl get service
 
#provide a wide information of the created pods 
kubectl get pods -o wide
 
#provided more information about ans specific type
kubectl explain {type}
-example
kubectl explain pods
kubectl explain replicaset

#provided more information about pods
kubectl get pods -o wide

#provide more information about an especific pod
kubectl describe pod {pod-id}
-example
kubectl describe pod hello-world-rest-api-58ff5dd898-9trh2
 
#show you how many pod are running at all time (also mantain a certain number of pods running)
kubectl get replicasets
kubectl get replicaset

#create a replicated of a image (pod)
kubectl scale deployment {image-name} --replicas={no of replicas}
-example
kubectl scale deployment hello-world-rest-api --replicas=3
kubectl get pods
kubectl get replicaset

#show the events 
kubectl get events

#show the events by 
kubectl get events --sort.by={type of event}
-example
kubectl get events --sort.by=.metadata.creationTimestamp
 
kubectl get rs
kubectl get rs -o wide
kubectl set image deployment hello-world-rest-api hello-world-rest-api=DUMMY_IMAGE:TEST
kubectl get rs -o wide
kubectl get pods
kubectl describe pod hello-world-rest-api-85995ddd5c-msjsm
kubectl get events --sort-by=.metadata.creationTimestamp
 
#set a image into a specifict container 
kubectl set image deployment {deployment-name} {deployment-name}={image-name}
-example
kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api:0.0.2.RELEASE


kubectl get events --sort-by=.metadata.creationTimestamp
kubectl get pods -o wide

#delete pod by id
kubectl delete pod {pod-id}
-example
kubectl delete pod hello-world-rest-api-67c79fd44f-n6c7l


kubectl get pods -o wide
kubectl delete pod hello-world-rest-api-67c79fd44f-8bhdt
 
gcloud container clusters get-credentials in28minutes-cluster --zone us-central1-c --project solid-course-258105
docker login
docker push in28min/mmv2-currency-exchange-service:0.0.11-SNAPSHOT
docker push in28min/mmv2-currency-conversion-service:0.0.11-SNAPSHOT
 
kubectl create deployment currency-exchange --image=in28min/mmv2-currency-exchange-service:0.0.11-SNAPSHOT
kubectl expose deployment currency-exchange --type=LoadBalancer --port=8000
kubectl get svc

#show you all the services that are running
kubectl get services

kubectl get pods
kubectl get po
kubectl get replicaset
kubectl get rs
kubectl get all
 
kubectl create deployment currency-conversion --image=in28min/mmv2-currency-conversion-service:0.0.11-SNAPSHOT
kubectl expose deployment currency-conversion --type=LoadBalancer --port=8100
 
kubectl get svc --watch
 
kubectl get deployments
 
kubectl get deployment currency-exchange -o yaml >> deployment.yaml 
kubectl get service currency-exchange -o yaml >> service.yaml 
 
kubectl diff -f deployment.yaml
kubectl apply -f deployment.yaml
 
kubectl delete all -l app=currency-exchange
kubectl delete all -l app=currency-conversion
 
kubectl rollout history deployment currency-conversion
kubectl rollout history deployment currency-exchange
kubectl rollout undo deployment currency-exchange --to-revision=1
 
kubectl logs currency-exchange-9fc6f979b-2gmn8
kubectl logs -f currency-exchange-9fc6f979b-2gmn8 
 
kubectl autoscale deployment currency-exchange --min=1 --max=3 --cpu-percent=5 
kubectl get hpa
 
kubectl top pod
kubectl top nodes
kubectl get hpa
kubectl delete hpa currency-exchange
 
kubectl create configmap currency-conversion --from-literal=CURRENCY_EXCHANGE_URI=http://currency-exchange
kubectl get configmap
 
kubectl get configmap currency-conversion -o yaml >> configmap.yaml
 
watch -n 0.1 curl http://34.66.241.150:8100/currency-conversion-feign/from/USD/to/INR/quantity/10
 
docker push in28min/mmv2-currency-conversion-service:0.0.12-SNAPSHOT
docker push in28min/mmv2-currency-exchange-service:0.0.12-SNAPSHOT